{"version":3,"sources":["store/index.ts","theme.ts","cmp/ViewOptions.tsx","cmp/StateSelect.tsx","cmp/Header.tsx","cmp/SeriesColors.ts","cmp/chartFns.ts","cmp/CumulativeChart.tsx","cmp/PerDayChart.tsx","cmp/Charts.tsx","cmp/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getDefaultState","skipSession","dataset","dateKeys","data","includedStates","popScaled","firstConfirmedShift","showPerDay","showCumulative","JSON","parse","localStorage","getItem","store","createStore","state","action","newState","type","payload","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","setItem","stringify","createMuiTheme","palette","typography","h1","fontSize","useStyles","makeStyles","theme","root","display","flexDirection","justifyContent","select","marginRight","spacing","flex","ViewOptions","useSelector","dispatch","useDispatch","classes","firstDate","className","Select","onChange","e","target","value","MenuItem","v","batch","marginTop","marginBottom","StateSelect","id","label","displayEmpty","fullWidth","renderValue","states","length","join","multiple","map","row","key","location","alignItems","spacer","Header","Typography","variant","Button","color","onClick","convertDateString","s","p","split","d","Date","setMonth","parseInt","setDate","getTime","getSharedOptions","mode","colors","SeriesColors","xaxis","categories","i","title","text","axisTicks","show","labels","hideOverlappingLabels","rotate","yaxis","min","formatter","Math","round","legend","showForSingleSeries","onItemClick","toggleDataSeries","CumulativeChart","options","stroke","width","seriesSet","name","population","lastDayWithNoConfirmed","dataPerDate","confirmedDeltas","k","n","firstIndex","indexOf","slice","curve","buildSeries","find","height","series","PerDayChart","reduce","acc","newSeries","overflow","Charts","padding","Main","App","CssBaseline","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8e8761e.chunk.js","sourcesContent":["/* globals __REDUX_DEVTOOLS_EXTENSION__ */\nimport { createStore } from 'redux';\nimport { dateKeys, data } from '../confirmed_by_state.json';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: any\n  }\n}\n\nconst getDefaultState = (skipSession: boolean = false): StoreState => {\n  return {\n    dataset: {\n      dateKeys,\n      data: data as StateData[],\n    },\n    includedStates: ['United States', 'Washington', 'District of Columbia'],\n    popScaled: true,\n    firstConfirmedShift: false,\n    showPerDay: true,\n    showCumulative: false,\n    ...(!skipSession\n      ? JSON.parse(localStorage.getItem('state') || '{}')\n      : {}),\n  };\n};\n\nfunction root(state: StoreState | undefined, action: StoreAction): StoreState {\n  if (typeof state === 'undefined') {\n    return getDefaultState();\n  }\n\n  let newState: StoreState = {\n    ...state,\n    includedStates: [...state.includedStates],\n  };\n\n  switch (action.type) {\n    case 'setIncludedStates':\n      newState.includedStates = [...(action.payload as string[])];\n      break;\n    case 'setPopScaled':\n      newState.popScaled = action.payload as boolean;\n      break;\n    case 'setFirstConfirmedShift':\n      newState.firstConfirmedShift = action.payload as boolean;\n      break;\n    case 'setShowPerDay':\n      newState.showPerDay = action.payload as boolean;\n      break;\n    case 'setShowCumulative':\n      newState.showCumulative = action.payload as boolean;\n      break;\n    case 'resetApp':\n      newState = getDefaultState(true);\n      break;\n  }\n\n  return newState;\n}\n\nconst store = createStore(\n  root,\n  getDefaultState(),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nstore.subscribe(() => {\n  const {\n    includedStates,\n    popScaled,\n    firstConfirmedShift,\n    showPerDay,\n    showCumulative,\n  } = store.getState();\n  localStorage.setItem(\n    'state',\n    JSON.stringify({\n      includedStates,\n      popScaled,\n      firstConfirmedShift,\n      showPerDay,\n      showCumulative,\n    })\n  );\n});\n\nexport default store;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n  typography: {\n    h1: {\n      fontSize: '2rem'\n    }\n  }\n});\n","import React from 'react';\nimport { Select, MenuItem, makeStyles } from '@material-ui/core';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '@media (max-width: 799px)': {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'stretch',\n    },\n  },\n  select: {\n    marginRight: theme.spacing(1),\n    '&:last-child': {\n      marginRight: 0,\n    },\n    '@media (max-width: 799px)': {\n      flex: '1 1',\n    },\n  },\n}));\n\nexport const ViewOptions = () => {\n  const {\n    dataset: { dateKeys },\n    popScaled,\n    firstConfirmedShift,\n    showPerDay,\n    showCumulative,\n  } = useSelector((state) => state) as StoreState;\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const firstDate = dateKeys[0];\n\n  return (\n    <div className={classes.root}>\n      <Select\n        className={classes.select}\n        onChange={(e) => {\n          dispatch({\n            type: 'setPopScaled',\n            payload: e.target.value === 'percent',\n          });\n        }}\n        value={popScaled ? 'percent' : 'number'}\n      >\n        <MenuItem value=\"number\">Show # of cases</MenuItem>\n        <MenuItem value=\"percent\">Show % of state pop.</MenuItem>\n      </Select>\n      <Select\n        className={classes.select}\n        onChange={(e) => {\n          dispatch({\n            type: 'setFirstConfirmedShift',\n            payload: e.target.value === 'confirmed',\n          });\n        }}\n        value={firstConfirmedShift ? 'confirmed' : 'date'}\n      >\n        <MenuItem value=\"date\">Start at {firstDate}</MenuItem>\n        <MenuItem value=\"confirmed\">Start at first confirmed</MenuItem>\n      </Select>\n      <Select\n        className={classes.select}\n        onChange={(e) => {\n          const v = e.target.value;\n          batch(() => {\n            dispatch({\n              type: 'setShowPerDay',\n              payload: v !== 'cumulative',\n            });\n            dispatch({\n              type: 'setShowCumulative',\n              payload: v !== 'daily',\n            });\n          });\n        }}\n        value={\n          showCumulative && showPerDay\n            ? 'both'\n            : showPerDay\n            ? 'daily'\n            : 'cumulative'\n        }\n      >\n        <MenuItem value=\"daily\">Show cases per day</MenuItem>\n        <MenuItem value=\"cumulative\">Show cumulative</MenuItem>\n        <MenuItem value=\"both\">Show both</MenuItem>\n      </Select>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Select, MenuItem, makeStyles } from '@material-ui/core';\n\nimport { data } from '../confirmed_by_state.json';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}))\n\nexport const StateSelect = () => {\n  const { includedStates } = useSelector((state) => state) as StoreState;\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  return (\n    <Select\n      id=\"stateSelect\"\n      label=\"States\"\n      className={classes.root}\n      displayEmpty\n      fullWidth\n      renderValue={(value: unknown): React.ReactNode => {\n        const states: string[] = value as string[];\n        if (states.length === 0) {\n          return 'Select a state';\n        } else {\n          return states.join(', ');\n        }\n      }}\n      multiple\n      value={includedStates}\n      onChange={(e: any) =>\n        dispatch({\n          type: 'setIncludedStates',\n          payload: e.target.value as string[],\n        })\n      }\n    >\n      {data.map((row) => (\n        <MenuItem key={`mi-${row.location}`} value={row.location}>\n          {row.location}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n","import React from 'react';\nimport { makeStyles, Typography, Button } from '@material-ui/core';\nimport { ViewOptions } from './ViewOptions';\nimport { StateSelect } from './StateSelect';\nimport { useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: theme.spacing(2),\n  },\n  row: {\n    '@media (max-width: 799px)': {\n      '& > h1': {\n        marginBottom: theme.spacing(1),\n      },\n    },\n    '@media (min-width: 800px)': {\n      display: 'flex',\n      alignItems: 'center',\n    },\n  },\n  spacer: {\n    flex: '1 1 0',\n  },\n}));\n\nexport const Header = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  return (\n    <header className={classes.root}>\n      <div className={classes.row}>\n        <Typography variant=\"h1\">COVID-19 Trends by State</Typography>\n        <div className={classes.spacer} />\n        <ViewOptions />\n      </div>\n      <StateSelect />\n      <Button\n        fullWidth\n        color=\"secondary\"\n        variant=\"contained\"\n        onClick={() => {\n          dispatch({\n            type: 'resetApp',\n          });\n        }}\n      >\n        Reset all settings\n      </Button>\n    </header>\n  );\n};\n","export default [\n  '#FF0000',\n  '#FFFF00',\n  '#00EAFF',\n  '#AA00FF',\n  '#FF7F00',\n  '#BFFF00',\n  '#0095FF',\n  '#FF00AA',\n  '#FFD400',\n  '#6AFF00',\n  '#0040FF',\n  '#EDB9B9',\n  '#B9D7ED',\n  '#E7E9B9',\n  '#DCB9ED',\n  '#B9EDE0',\n  '#8F2323',\n  '#23628F',\n  '#8F6A23',\n  '#6B238F',\n  '#4F8F23',\n  '#000000',\n  '#737373',\n  '#CCCCCC',\n];\n","import SeriesColors from './SeriesColors';\n\nfunction convertDateString(s: string): number {\n  const p = s.split('/');\n  const d = new Date();\n  d.setMonth(parseInt(p[0], 10) - 1);\n  d.setDate(parseInt(p[1], 10));\n  return d.getTime();\n}\n\nexport function getSharedOptions({\n  dataset: { dateKeys },\n  firstConfirmedShift,\n  popScaled,\n}: StoreState) {\n  return {\n    theme: {\n      mode: 'dark',\n    },\n    colors: SeriesColors,\n    xaxis: {\n      type: firstConfirmedShift ? 'categories' : 'datetime',\n      categories: firstConfirmedShift ? dateKeys.map((v, i) => i) : dateKeys.map(convertDateString),\n      title: {\n        text: firstConfirmedShift\n          ? '# Days since first confirmed case'\n          : 'Date',\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        hideOverlappingLabels: true,\n        rotate: 0,\n      },\n    },\n    yaxis: {\n      min: 0,\n      title: {\n        text: popScaled ? '% of population' : '# of cases'\n      },\n      labels: {\n        formatter: popScaled\n          ? (value: number) => `${Math.round(value * 100000) / 1000}%`\n          : (value: number) => Math.round(value),\n      },\n    },\n    legend: {\n      showForSingleSeries: true,\n      onItemClick: {\n        toggleDataSeries: false,\n      },\n    },\n  };\n}\n","import React from 'react';\nimport ApexChart from 'react-apexcharts';\nimport { useSelector } from 'react-redux';\nimport { getSharedOptions } from './chartFns';\n\nexport const CumulativeChart = () => {\n  const state = useSelector((state) => state) as StoreState;\n  const {\n    includedStates,\n    firstConfirmedShift,\n    popScaled,\n    dataset: { data, dateKeys },\n  } = state;\n  const options = {\n    ...getSharedOptions(state),\n    title: {\n      text: 'Cumulative confirmed cases',\n    },\n    stroke: {\n      width: 2,\n    }\n  };\n\n  const buildSeries = ({\n    location,\n    population,\n    lastDayWithNoConfirmed,\n    confirmedDeltas,\n    ...row\n  }: StateData) => {\n    const dataPerDate = row as any;\n\n    let data: any[] = dateKeys.map((k) => dataPerDate[k]);\n\n    if (popScaled) {\n      data = data.map((n) => n / population);\n    }\n\n    if (firstConfirmedShift) {\n      const firstIndex = dateKeys.indexOf(lastDayWithNoConfirmed);\n      if (firstIndex >= 0) {\n        data = data.slice(firstIndex);\n      }\n    }\n\n    return {\n      name: location,\n      curve: 'smooth',\n      data,\n    };\n  };\n\n  const seriesSet = includedStates.map((name: string) => {\n    const match = data.find((d) => d.location === name);\n    return buildSeries(match as StateData);\n  });\n\n  return (\n    <ApexChart\n      height={500}\n      type=\"line\"\n      options={options}\n      series={seriesSet}\n    />\n  );\n};\n","import React from 'react';\nimport ApexChart from 'react-apexcharts';\nimport { useSelector } from 'react-redux';\nimport { getSharedOptions } from './chartFns';\n\nexport const PerDayChart = () => {\n  const state = useSelector((state) => state) as StoreState;\n  const {\n    includedStates,\n    firstConfirmedShift,\n    popScaled,\n    dataset: { data, dateKeys },\n  } = state;\n\n  const options = {\n    ...getSharedOptions(state),\n    title: {\n      text: 'Confirmed cases per day',\n    },\n    stroke: {\n      width: 2,\n    }\n  };\n\n  const buildSeries = ({\n    location,\n    population,\n    lastDayWithNoConfirmed,\n    confirmedDeltas,\n    ...row\n  }: StateData) => {\n    let data: any[] = confirmedDeltas;\n\n    if (popScaled) {\n      data = data.map((n) => n / population);\n    }\n\n    if (firstConfirmedShift) {\n      const firstIndex = dateKeys.indexOf(lastDayWithNoConfirmed);\n      if (firstIndex >= 0) {\n        data = data.slice(firstIndex);\n      }\n    }\n\n    return [\n      {\n        name: location,\n        type: 'bar',\n        data,\n      },\n    ];\n  };\n\n  const seriesSet = includedStates.reduce((acc: any[], name: string) => {\n    const match = data.find((d) => d.location === name);\n    const newSeries = buildSeries(match as StateData);\n    return [...acc, ...newSeries];\n  }, []);\n\n  return (\n    <ApexChart\n      height={500}\n      options={options}\n      series={seriesSet}\n    />\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CumulativeChart } from './CumulativeChart';\nimport { PerDayChart } from './PerDayChart';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    flex: '1 1 100%',\n    overflow: 'hidden',\n  },\n});\n\nexport const Charts = () => {\n  const classes = useStyles();\n  const state = useSelector((state) => state) as StoreState;\n  const { showCumulative, showPerDay } = state;\n\n  return (\n    <div className={classes.root}>\n      {showPerDay ? <PerDayChart /> : null}\n      {showCumulative ? <CumulativeChart /> : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { Header } from './Header';\nimport { Charts } from './Charts';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '1.5em 2.5em'\n  }\n}))\n\n\nexport const Main = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Header />\n      <Charts />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { CssBaseline } from '@material-ui/core';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\nimport './App.css';\nimport store from './store';\nimport theme from './theme';\n\nimport { Main } from './cmp/Main';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Main />\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}