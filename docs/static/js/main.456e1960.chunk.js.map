{"version":3,"sources":["store/index.ts","theme.ts","cmp/SeriesColors.ts","cmp/CumulativeChart.tsx","cmp/PerDayChart.tsx","cmp/Charts.tsx","cmp/StateSelect.tsx","cmp/Form.tsx","cmp/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultState","dataset","dateKeys","data","includedStates","popScaled","firstConfirmedShift","showPerDay","showCumulative","JSON","parse","sessionStorage","getItem","store","createStore","state","action","newState","type","payload","subscribe","getState","setItem","stringify","createMuiTheme","palette","typography","h1","fontSize","CumulativeChart","useSelector","options","theme","mode","colors","SeriesColors","xaxis","categories","map","v","i","labels","show","yaxis","min","formatter","value","Math","round","stroke","width","seriesSet","name","provinceState","population","lastDayWithNoConfirmed","dataPerDate","confirmedDeltas","k","n","firstIndex","indexOf","slice","curve","buildSeries","find","d","height","series","PerDayChart","dataLabels","enabled","useStyles","makeStyles","root","flex","overflow","Charts","classes","className","StateSelect","onChange","Select","id","label","displayEmpty","renderValue","states","length","join","multiple","row","MenuItem","key","Form","dispatch","useDispatch","noValidate","autoComplete","FormControl","e","target","FormGroup","FormControlLabel","control","Checkbox","checked","boxSizing","padding","display","flexDirection","marginTop","Main","Typography","variant","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.456e1960.chunk.js","sourcesContent":["import { createStore } from 'redux';\nimport { dateKeys, data } from '../confirmed_by_state.json';\n\nconst defaultState: StoreState = {\n  dataset: {\n    dateKeys,\n    data: data as StateData[],\n  },\n  includedStates: ['Washington'],\n  popScaled: true,\n  firstConfirmedShift: true,\n  showPerDay: false,\n  showCumulative: true,\n  ...JSON.parse(sessionStorage.getItem('state') || '{}')\n};\n\nfunction root(state: StoreState | undefined, action: StoreAction): StoreState {\n  if (typeof state === 'undefined') {\n    return {\n      ...defaultState,\n    };\n  }\n\n  const newState: StoreState = {\n    ...state,\n    includedStates: [...state.includedStates],\n  };\n\n  switch (action.type) {\n    case 'setIncludedStates':\n      newState.includedStates = [...(action.payload as string[])];\n      break;\n    case 'setPopScaled':\n      newState.popScaled = action.payload as boolean;\n      break;\n    case 'setFirstConfirmedShift':\n      newState.firstConfirmedShift = action.payload as boolean;\n      break;\n    case 'setShowPerDay':\n      newState.showPerDay = action.payload as boolean;\n      break;\n    case 'setShowCumulative':\n      newState.showCumulative = action.payload as boolean;\n      break;\n  }\n\n  return newState;\n}\n\nconst store = createStore(root);\n\nstore.subscribe((...rest: any) => {\n  const {\n    includedStates,\n    popScaled,\n    firstConfirmedShift,\n    showPerDay,\n    showCumulative,\n  } = store.getState();\n  sessionStorage.setItem(\n    'state',\n    JSON.stringify({\n      includedStates,\n      popScaled,\n      firstConfirmedShift,\n      showPerDay,\n      showCumulative,\n    })\n  );\n});\n\nexport default store;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n  typography: {\n    h1: {\n      fontSize: '2rem'\n    }\n  }\n});\n","export default [\n  '#FF0000',\n  '#FFFF00',\n  '#00EAFF',\n  '#AA00FF',\n  '#FF7F00',\n  '#BFFF00',\n  '#0095FF',\n  '#FF00AA',\n  '#FFD400',\n  '#6AFF00',\n  '#0040FF',\n  '#EDB9B9',\n  '#B9D7ED',\n  '#E7E9B9',\n  '#DCB9ED',\n  '#B9EDE0',\n  '#8F2323',\n  '#23628F',\n  '#8F6A23',\n  '#6B238F',\n  '#4F8F23',\n  '#000000',\n  '#737373',\n  '#CCCCCC',\n];\n","import React from 'react';\nimport ApexChart from 'react-apexcharts';\nimport { useSelector } from 'react-redux';\nimport SeriesColors from './SeriesColors';\n\nexport const CumulativeChart = () => {\n  const {\n    includedStates,\n    firstConfirmedShift,\n    popScaled,\n    showPerDay,\n    dataset: { data, dateKeys },\n  } = useSelector((state) => state) as StoreState;\n\n  const options = {\n    theme: {\n      mode: 'dark'\n    },\n    colors: SeriesColors,\n    xaxis: {\n      type: 'categories',\n      categories: firstConfirmedShift ? dateKeys.map((v, i) => i) : dateKeys,\n      labels: {\n        show: false,\n      },\n    },\n    yaxis: {\n      min: 0,\n      labels: {\n        formatter: popScaled\n          ? (value: number) => `${Math.round(value * 100000) / 1000}%`\n          : (value: number) => Math.round(value),\n      },\n    },\n    stroke: {\n      width: 2,\n    },\n  };\n\n  const buildSeries = ({\n    provinceState,\n    population,\n    lastDayWithNoConfirmed,\n    confirmedDeltas,\n    ...row\n  }: StateData) => {\n    const dataPerDate = row as any;\n\n    let data: any[] = dateKeys.map((k) => dataPerDate[k]);\n\n    if (popScaled) {\n      data = data.map((n) => n / population);\n    }\n\n    if (firstConfirmedShift) {\n      const firstIndex = dateKeys.indexOf(lastDayWithNoConfirmed);\n      if (firstIndex >= 0) {\n        data = data.slice(firstIndex);\n      }\n    }\n\n    return {\n      name: provinceState,\n      curve: 'smooth',\n      data,\n    };\n  };\n\n  const seriesSet = includedStates.map((name: string) => {\n    const match = data.find((d) => d.provinceState === name);\n    return buildSeries(match as StateData);\n  });\n\n  return (\n    <ApexChart\n      height={showPerDay ? '45%' : '95%'}\n      type=\"line\"\n      options={options}\n      series={seriesSet}\n    />\n  );\n};\n","import React from 'react';\nimport ApexChart from 'react-apexcharts';\nimport { useSelector } from 'react-redux';\nimport SeriesColors from './SeriesColors';\n\nexport const PerDayChart = () => {\n  const {\n    includedStates,\n    firstConfirmedShift,\n    popScaled,\n    showCumulative,\n    dataset: { data, dateKeys },\n  } = useSelector((state) => state) as StoreState;\n\n  const options = {\n    theme: {\n      mode: 'dark',\n    },\n    colors: SeriesColors,\n    xaxis: {\n      type: 'categories',\n      categories: firstConfirmedShift ? dateKeys.map((v, i) => i) : dateKeys,\n      labels: {\n        show: false,\n      },\n    },\n    yaxis: {\n      min: 0,\n      labels: {\n        formatter: popScaled\n          ? (value: number) => `${Math.round(value * 100000) / 1000}%`\n          : (value: number) => Math.round(value),\n      },\n    },\n    stroke: {\n      width: 3,\n    },\n    dataLabels: {\n      enabled: false,\n    },\n  };\n\n  const buildSeries = ({\n    provinceState,\n    population,\n    lastDayWithNoConfirmed,\n    confirmedDeltas,\n    ...row\n  }: StateData) => {\n    let data: any[] = confirmedDeltas;\n\n    if (popScaled) {\n      data = data.map((n) => n / population);\n    }\n\n    if (firstConfirmedShift) {\n      const firstIndex = dateKeys.indexOf(lastDayWithNoConfirmed);\n      if (firstIndex >= 0) {\n        data = data.slice(firstIndex);\n      }\n    }\n\n    return {\n      name: provinceState,\n      curve: 'smooth',\n      data,\n    };\n  };\n\n  const seriesSet = includedStates.map((name: string) => {\n    const match = data.find((d) => d.provinceState === name);\n    return buildSeries(match as StateData);\n  });\n\n  return (\n    <ApexChart\n      height={showCumulative ? '45%' : '95%'}\n      type=\"bar\"\n      options={options}\n      series={seriesSet}\n    />\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CumulativeChart } from './CumulativeChart';\nimport { PerDayChart } from './PerDayChart';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    flex: '1 1 100%',\n    overflow: 'hidden'\n  }\n})\n\nexport const Charts = () => {\n  const classes = useStyles();\n  const state = useSelector((state) => state) as StoreState;\n  const {\n    showCumulative,\n    showPerDay\n  } = state;\n\n  return (\n    <div className={classes.root}>\n      {showCumulative ? <CumulativeChart /> : null}\n      {showPerDay ? <PerDayChart /> : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Select, MenuItem } from '@material-ui/core';\n\nimport { data } from '../confirmed_by_state.json';\n\ninterface StateSelectProps {\n  value: unknown;\n  onChange: (\n    event: React.ChangeEvent<{ name?: string; value: unknown }>,\n    child: React.ReactNode\n  ) => void;\n}\n\nexport const StateSelect = ({ value, onChange }: StateSelectProps) => {\n  return (\n    <Select\n      id=\"stateSelect\"\n      label=\"States\"\n      displayEmpty\n      renderValue={(value: unknown): React.ReactNode => {\n        const states: string[] = value as string[];\n        if (states.length === 0) {\n          return 'Select a state';\n        } else {\n          return states.join(', ');\n        }\n      }}\n      multiple\n      onChange={onChange}\n      value={value}\n    >\n      {data.map((row) => (\n        <MenuItem key={`mi-${row.provinceState}`} value={row.provinceState}>\n          {row.provinceState}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n","import React from 'react';\nimport {\n  FormControl,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  makeStyles,\n} from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { StateSelect } from './StateSelect';\n\nconst useStyles = makeStyles({\n  root: {\n    flex: 0\n  }\n})\n\nexport const Form = () => {\n  const classes = useStyles();\n  const {\n    includedStates,\n    popScaled,\n    firstConfirmedShift,\n    showPerDay,\n    showCumulative,\n  } = useSelector((state) => state) as StoreState;\n  const dispatch = useDispatch();\n\n  return (\n    <form noValidate autoComplete=\"off\" className={classes.root}>\n      <div className=\"chart-options-row\">\n        <FormControl className=\"chart-options-control\">\n          <StateSelect\n            value={includedStates}\n            onChange={(e: any) =>\n              dispatch({\n                type: 'setIncludedStates',\n                payload: e.target.value as string[],\n              })\n            }\n          />\n        </FormControl>\n      </div>\n      <div className=\"chart-options-row\">\n        <FormGroup row>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={popScaled}\n                onChange={(e: any) =>\n                  dispatch({\n                    type: 'setPopScaled',\n                    payload: e.target.checked,\n                  })\n                }\n              />\n            }\n            label=\"Scaled to % of state pop\"\n          />\n        </FormGroup>\n        <FormGroup row>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={firstConfirmedShift}\n                onChange={(e: any) =>\n                  dispatch({\n                    type: 'setFirstConfirmedShift',\n                    payload: e.target.checked,\n                  })\n                }\n              />\n            }\n            label=\"Use days since first confirmed\"\n          />\n        </FormGroup>\n        <FormGroup row>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={showPerDay}\n                onChange={(e: any) =>\n                  dispatch({\n                    type: 'setShowPerDay',\n                    payload: e.target.checked,\n                  })\n                }\n              />\n            }\n            label=\"Show confirmed per day\"\n          />\n        </FormGroup>\n        <FormGroup row>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={showCumulative}\n                onChange={(e: any) =>\n                  dispatch({\n                    type: 'setShowCumulative',\n                    payload: e.target.checked,\n                  })\n                }\n              />\n            }\n            label=\"Show cumulative confirmed\"\n          />\n        </FormGroup>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport { Charts } from './Charts';\nimport { Form } from './Form';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    boxSizing: 'border-box',\n    padding: '1.5em 2.5em',\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    '& > main': {\n      flex: '1 1 0',\n      marginTop: 10,\n      display: 'flex',\n      flexDirection: 'column',\n      overflow: 'hidden'\n    }\n  }\n}))\n\n\nexport const Main = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h1\">COVID-19 Trends by State</Typography>\n      <main>\n        <Charts />\n        <Form />\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { CssBaseline } from '@material-ui/core';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\nimport './App.css';\nimport store from './store';\nimport theme from './theme';\n\nimport { Main } from './cmp/Main';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Main />\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}